{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"(mlp)딥러닝개론_CNN.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPHOuaxVX2FrGvcl4bD8eA+"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["import tensorflow as tf\n","import numpy as np\n","import pandas as pd\n","import os\n","from sklearn.model_selection import train_test_split\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","import datetime\n","from sklearn.preprocessing import StandardScaler\n","import matplotlib.pyplot as plt\n","import random\n","\n","# DATA 불러오기 \n","right = pd.read_csv('./CHEONGJU.csv', parse_dates=['Date'])\n","\n","# right1 = 'Cheongju' data 중 random하게 이상 값 5% 뽑기 \n","right1 = right['Cheongju'].sample(frac=0.05,random_state=42)\n","\n","# 가우시안 그래프 표현하기 \n","mu1, sigma1 = 1.0, 0.4\n","x1 = np.linspace(0, 2, 1000)  \n","y1 = (1 / np.sqrt(2 * np.pi * sigma1**2)) * np.exp(-(x1-mu1)**2 / (2 * sigma1**2))\n","\n","# 이상데이터 만들기 위한 범위 설정하기 \n","n=0\n","sub = []\n","for n in range(len(x1)):\n","  if 1.8 <= x1[n]:\n","    sub.append(x1[n])\n","\n","sub = np.round(sub, 3)\n","# right3 = 뽑은 이상 값에 1.5배 하고, 내림차순으로 sort함 \n","right3 = right1 * random.choice(sub)\n","right3 = right3.sort_index(ascending=True)\n","\n","# right['Cheongju']값들을 right['Anomaly']에 넣기 \n","right['Anomaly'] = right['Cheongju']\n","right['Anomaly'] = right['Anomaly'].astype(float)\n","\n","# index에 맞춰서 원본을 이상 값 변경함 \n","for b in range(len(right3)):\n","  for c in range(len(right)):\n","    if right3.index[b] == right['Cheongju'].index[c]:\n","      right['Anomaly'][c] = right3.iloc[b]\n","      right['Label'][c] = 1"],"metadata":{"id":"_uhmaDzX6cg1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654845080686,"user_tz":-540,"elapsed":380426,"user":{"displayName":"yoonseo oh","userId":"11928230562068128284"}},"outputId":"ca8b4659-3d08-460a-c974-a7f4142883a7"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:44: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:45: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"]}]},{"cell_type":"code","source":["Normalization = pd.read_csv('./Normalization.csv')\n","\n","n=0\n","window_size=12\n","stride_size=6\n","\n","for l in range(len(Normalization)):\n","  stride_size=6\n","\n","  z = right['Anomaly'][n:(n+window_size)]\n","\n","  Normalization['Mean'][l] = z.mean()\n","  Normalization['Min'][l] = z.min()\n","  Normalization['Max'][l] = z.max()\n","  Normalization['Variance'][l] = z.var()\n","  Normalization['Median'][l] = z.median()\n","\n","  n = n + stride_size\n","  z = right['Anomaly']\n","\n","cut = int(len(right) / stride_size)\n","Normalization = Normalization[0:cut]\n","\n","print(len(Normalization))\n","\n","# Standardization 평균 0 / 분산 1\n","scaler = StandardScaler()\n","scaler = scaler.fit_transform(Normalization)\n","scaler =  pd.DataFrame(scaler)\n","scaler = scaler.rename(columns={0: 'Mean', 1: 'Min', 2: 'Max', 3: 'Variance', 4: 'Median', 5: 'Label'})\n","\n","result = pd.DataFrame(Normalization) # test_input_data.csv의 총 길이 = 742개\n","result.to_csv('Normalization_ys.csv', header=True, index=True)"],"metadata":{"id":"tsQwiu3Z6cdl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654845098144,"user_tz":-540,"elapsed":17460,"user":{"displayName":"yoonseo oh","userId":"11928230562068128284"}},"outputId":"ae0a8706-da6a-4496-a357-445cdeb172d4"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  del sys.path[0]\n","/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_block(indexer, value, name)\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:15: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  from ipykernel import kernelapp as app\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:16: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  app.launch_new_instance()\n"]},{"output_type":"stream","name":"stdout","text":["7304\n"]}]},{"cell_type":"code","source":["Labeling = pd.read_csv('Normalization_ys.csv', index_col = 0)\n","\n","n=0\n","window_size=12\n","stride_size=6\n","\n","for m in range(int(len(right) / stride_size -1)):\n","  stride_size=6\n","\n","  z = right['Anomaly'][n:(n+window_size)]\n","  y = right['Cheongju'][n:(n+window_size)]\n","  y = y.astype(float)\n","\n","  for w in range(window_size):\n","    \n","    if y.iloc[w] != z.iloc[w] :\n","      Labeling['Label'][m] = 1\n","      break\n","    else:\n","      Labeling['Label'][m] = 0\n","  n = n + stride_size\n","  z = right['Anomaly']\n","\n","result = pd.DataFrame(Labeling) # test_input_data.csv의 총 길이 = @@개\n","result.to_csv('Input_Data.csv', header=True, index=True)         \n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BtNV8jzK8yZO","executionInfo":{"status":"ok","timestamp":1654845120086,"user_tz":-540,"elapsed":21950,"user":{"displayName":"yoonseo oh","userId":"11928230562068128284"}},"outputId":"8d38cda4-a774-4d35-cac3-19e36875915e"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:17: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"]}]},{"cell_type":"code","source":["print(len(Labeling))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NUtVAURT8jQX","executionInfo":{"status":"ok","timestamp":1654845120086,"user_tz":-540,"elapsed":7,"user":{"displayName":"yoonseo oh","userId":"11928230562068128284"}},"outputId":"35ab5e24-31e7-402f-915e-0856e46b06a4"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["7304\n"]}]},{"cell_type":"code","source":["#정상데이터 개수\n","dd=0\n","for cc in range(len(Labeling)):\n","  if Labeling['Label'].iloc[cc] == 0:\n","    dd = dd + 1\n","\n","print(dd)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AIDosZQq8jOJ","executionInfo":{"status":"ok","timestamp":1654845120086,"user_tz":-540,"elapsed":5,"user":{"displayName":"yoonseo oh","userId":"11928230562068128284"}},"outputId":"2c5d95ba-aecf-4bad-fae4-120ce4723358"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["3936\n"]}]},{"cell_type":"code","source":["#이상데이터 개수\n","d=0\n","for c in range(len(Labeling)):\n","  if Labeling['Label'].iloc[c] == 1:\n","    d = d + 1\n","\n","print(d)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NjryrXAd8jLp","executionInfo":{"status":"ok","timestamp":1654845120087,"user_tz":-540,"elapsed":5,"user":{"displayName":"yoonseo oh","userId":"11928230562068128284"}},"outputId":"e436f1db-f363-4429-9331-842d892e659a"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["3368\n"]}]},{"cell_type":"code","source":["import tensorflow as tf\n","import numpy as np\n","import pandas as pd\n","import os\n","from sklearn.model_selection import train_test_split\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","import datetime\n","from keras.callbacks import EarlyStopping\n","\n","df_data1 = pd.read_csv('./Input_Data.csv', index_col = 0)\n","NumData1 = len(df_data1)\n","NumTrain1 = np.int(NumData1 * 0.7)\n","NumTest1 = NumData1 - NumTrain1\n","\n","x_train1 = df_data1.iloc[0:NumTrain1, 0:5].values\n","y_train1 = df_data1.iloc[0:NumTrain1, -1].values\n","x_test1 = df_data1.iloc[NumTrain1:, 0:5].values\n","y_test1 = df_data1.iloc[NumTrain1:, -1].values\n","x_train1, x_val1, y_train1, y_val1 = train_test_split(x_train1, y_train1, test_size=0.1)\n","\n","inputs = tf.keras.Input(shape=(5,))\n","x = tf.keras.layers.Dense(50, activation=\"relu\")(inputs)\n","x = tf.keras.layers.Dense(80, activation=\"relu\")(x)\n","x = tf.keras.layers.Dense(120, activation=\"relu\")(x)\n","x = tf.keras.layers.Dense(120, activation=\"relu\")(x)\n","x = tf.keras.layers.Dense(120, activation=\"relu\")(x)\n","x = tf.keras.layers.Dense(80, activation=\"relu\")(x)\n","x = tf.keras.layers.Dense(50, activation=\"relu\")(x)\n","outputs = tf.keras.layers.Dense(2, activation=\"softmax\")(x)\n","model = keras.Model(inputs=inputs, outputs=outputs)\n","\n","opt = keras.optimizers.Adam(learning_rate=0.0001)\n","model.compile(\n","    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n","    optimizer=opt,\n","    metrics=[\"accuracy\"]\n",")\n","\n","log_dir = \"logs/fit/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n","tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n","early_stopping_callback = EarlyStopping(monitor='val_loss', patience=50)\n","history1 = model.fit(x_train1, y_train1, batch_size=32, epochs=1000, validation_data=(x_val1, y_val1), \n","                            callbacks=[tensorboard_callback,early_stopping_callback], verbose=2)\n","\n","score1 = model.evaluate(x_test1, y_test1, verbose=0)\n","print(\"Test1 loss:\", score1[0])\n","print(\"Test1 accuracy:\", score1[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nalj_ZhV8mga","executionInfo":{"status":"ok","timestamp":1654845263797,"user_tz":-540,"elapsed":143713,"user":{"displayName":"yoonseo oh","userId":"11928230562068128284"}},"outputId":"6b8b23e4-03b4-47b0-dd24-ec99819263a0"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:13: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n","Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n","  del sys.path[0]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/1000\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/dispatch.py:1082: UserWarning: \"`sparse_categorical_crossentropy` received `from_logits=True`, but the `output` argument was produced by a sigmoid or softmax activation and thus does not represent logits. Was this intended?\"\n","  return dispatch_target(*args, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["144/144 - 4s - loss: 1.1847 - accuracy: 0.6391 - val_loss: 0.5385 - val_accuracy: 0.7227 - 4s/epoch - 24ms/step\n","Epoch 2/1000\n","144/144 - 0s - loss: 0.5368 - accuracy: 0.6970 - val_loss: 0.6184 - val_accuracy: 0.7168 - 497ms/epoch - 3ms/step\n","Epoch 3/1000\n","144/144 - 1s - loss: 0.5662 - accuracy: 0.6883 - val_loss: 0.5239 - val_accuracy: 0.7285 - 504ms/epoch - 4ms/step\n","Epoch 4/1000\n","144/144 - 1s - loss: 0.5337 - accuracy: 0.6937 - val_loss: 0.5431 - val_accuracy: 0.7285 - 500ms/epoch - 3ms/step\n","Epoch 5/1000\n","144/144 - 1s - loss: 0.5357 - accuracy: 0.6959 - val_loss: 0.5091 - val_accuracy: 0.7227 - 518ms/epoch - 4ms/step\n","Epoch 6/1000\n","144/144 - 0s - loss: 0.5294 - accuracy: 0.7011 - val_loss: 0.5959 - val_accuracy: 0.6875 - 488ms/epoch - 3ms/step\n","Epoch 7/1000\n","144/144 - 0s - loss: 0.5114 - accuracy: 0.7117 - val_loss: 0.5238 - val_accuracy: 0.7461 - 493ms/epoch - 3ms/step\n","Epoch 8/1000\n","144/144 - 1s - loss: 0.5340 - accuracy: 0.7065 - val_loss: 0.5031 - val_accuracy: 0.7383 - 509ms/epoch - 4ms/step\n","Epoch 9/1000\n","144/144 - 1s - loss: 0.5136 - accuracy: 0.7183 - val_loss: 0.5173 - val_accuracy: 0.7422 - 531ms/epoch - 4ms/step\n","Epoch 10/1000\n","144/144 - 1s - loss: 0.5099 - accuracy: 0.7237 - val_loss: 0.5225 - val_accuracy: 0.7461 - 500ms/epoch - 3ms/step\n","Epoch 11/1000\n","144/144 - 0s - loss: 0.5102 - accuracy: 0.7289 - val_loss: 0.5095 - val_accuracy: 0.7363 - 472ms/epoch - 3ms/step\n","Epoch 12/1000\n","144/144 - 0s - loss: 0.5587 - accuracy: 0.7117 - val_loss: 0.5521 - val_accuracy: 0.7305 - 493ms/epoch - 3ms/step\n","Epoch 13/1000\n","144/144 - 1s - loss: 0.5013 - accuracy: 0.7320 - val_loss: 0.5013 - val_accuracy: 0.7578 - 518ms/epoch - 4ms/step\n","Epoch 14/1000\n","144/144 - 1s - loss: 0.5013 - accuracy: 0.7354 - val_loss: 0.4909 - val_accuracy: 0.7539 - 505ms/epoch - 4ms/step\n","Epoch 15/1000\n","144/144 - 1s - loss: 0.4979 - accuracy: 0.7343 - val_loss: 0.4963 - val_accuracy: 0.7676 - 517ms/epoch - 4ms/step\n","Epoch 16/1000\n","144/144 - 0s - loss: 0.4937 - accuracy: 0.7363 - val_loss: 0.5218 - val_accuracy: 0.7363 - 469ms/epoch - 3ms/step\n","Epoch 17/1000\n","144/144 - 1s - loss: 0.4915 - accuracy: 0.7424 - val_loss: 0.5301 - val_accuracy: 0.7246 - 500ms/epoch - 3ms/step\n","Epoch 18/1000\n","144/144 - 0s - loss: 0.4987 - accuracy: 0.7367 - val_loss: 0.5153 - val_accuracy: 0.7324 - 464ms/epoch - 3ms/step\n","Epoch 19/1000\n","144/144 - 1s - loss: 0.5001 - accuracy: 0.7337 - val_loss: 0.4769 - val_accuracy: 0.7598 - 509ms/epoch - 4ms/step\n","Epoch 20/1000\n","144/144 - 0s - loss: 0.4955 - accuracy: 0.7424 - val_loss: 0.5339 - val_accuracy: 0.7500 - 470ms/epoch - 3ms/step\n","Epoch 21/1000\n","144/144 - 0s - loss: 0.4953 - accuracy: 0.7391 - val_loss: 0.4781 - val_accuracy: 0.7598 - 477ms/epoch - 3ms/step\n","Epoch 22/1000\n","144/144 - 0s - loss: 0.4832 - accuracy: 0.7457 - val_loss: 0.4752 - val_accuracy: 0.7656 - 472ms/epoch - 3ms/step\n","Epoch 23/1000\n","144/144 - 1s - loss: 0.4813 - accuracy: 0.7472 - val_loss: 0.5116 - val_accuracy: 0.7363 - 513ms/epoch - 4ms/step\n","Epoch 24/1000\n","144/144 - 0s - loss: 0.4811 - accuracy: 0.7413 - val_loss: 0.4832 - val_accuracy: 0.7500 - 473ms/epoch - 3ms/step\n","Epoch 25/1000\n","144/144 - 0s - loss: 0.4814 - accuracy: 0.7491 - val_loss: 0.4705 - val_accuracy: 0.7578 - 490ms/epoch - 3ms/step\n","Epoch 26/1000\n","144/144 - 1s - loss: 0.4802 - accuracy: 0.7498 - val_loss: 0.5014 - val_accuracy: 0.7422 - 504ms/epoch - 3ms/step\n","Epoch 27/1000\n","144/144 - 0s - loss: 0.4753 - accuracy: 0.7537 - val_loss: 0.5029 - val_accuracy: 0.7480 - 473ms/epoch - 3ms/step\n","Epoch 28/1000\n","144/144 - 0s - loss: 0.4788 - accuracy: 0.7500 - val_loss: 0.5449 - val_accuracy: 0.7168 - 470ms/epoch - 3ms/step\n","Epoch 29/1000\n","144/144 - 0s - loss: 0.4823 - accuracy: 0.7528 - val_loss: 0.4621 - val_accuracy: 0.7695 - 462ms/epoch - 3ms/step\n","Epoch 30/1000\n","144/144 - 0s - loss: 0.4755 - accuracy: 0.7426 - val_loss: 0.4947 - val_accuracy: 0.7598 - 450ms/epoch - 3ms/step\n","Epoch 31/1000\n","144/144 - 1s - loss: 0.4680 - accuracy: 0.7578 - val_loss: 0.4713 - val_accuracy: 0.7676 - 501ms/epoch - 3ms/step\n","Epoch 32/1000\n","144/144 - 0s - loss: 0.4663 - accuracy: 0.7648 - val_loss: 0.4791 - val_accuracy: 0.7480 - 467ms/epoch - 3ms/step\n","Epoch 33/1000\n","144/144 - 1s - loss: 0.4813 - accuracy: 0.7435 - val_loss: 0.4571 - val_accuracy: 0.7676 - 507ms/epoch - 4ms/step\n","Epoch 34/1000\n","144/144 - 0s - loss: 0.4748 - accuracy: 0.7550 - val_loss: 0.4607 - val_accuracy: 0.7637 - 469ms/epoch - 3ms/step\n","Epoch 35/1000\n","144/144 - 0s - loss: 0.4802 - accuracy: 0.7515 - val_loss: 0.4620 - val_accuracy: 0.7754 - 475ms/epoch - 3ms/step\n","Epoch 36/1000\n","144/144 - 1s - loss: 0.4616 - accuracy: 0.7576 - val_loss: 0.4587 - val_accuracy: 0.7793 - 500ms/epoch - 3ms/step\n","Epoch 37/1000\n","144/144 - 0s - loss: 0.4652 - accuracy: 0.7539 - val_loss: 0.4455 - val_accuracy: 0.7910 - 500ms/epoch - 3ms/step\n","Epoch 38/1000\n","144/144 - 0s - loss: 0.4582 - accuracy: 0.7604 - val_loss: 0.4469 - val_accuracy: 0.7852 - 498ms/epoch - 3ms/step\n","Epoch 39/1000\n","144/144 - 1s - loss: 0.4739 - accuracy: 0.7567 - val_loss: 0.4818 - val_accuracy: 0.7441 - 506ms/epoch - 4ms/step\n","Epoch 40/1000\n","144/144 - 0s - loss: 0.4659 - accuracy: 0.7554 - val_loss: 0.4690 - val_accuracy: 0.7656 - 494ms/epoch - 3ms/step\n","Epoch 41/1000\n","144/144 - 0s - loss: 0.4642 - accuracy: 0.7609 - val_loss: 0.4738 - val_accuracy: 0.7578 - 490ms/epoch - 3ms/step\n","Epoch 42/1000\n","144/144 - 1s - loss: 0.4518 - accuracy: 0.7639 - val_loss: 0.4893 - val_accuracy: 0.7363 - 505ms/epoch - 4ms/step\n","Epoch 43/1000\n","144/144 - 1s - loss: 0.4538 - accuracy: 0.7617 - val_loss: 0.4489 - val_accuracy: 0.7832 - 509ms/epoch - 4ms/step\n","Epoch 44/1000\n","144/144 - 0s - loss: 0.4568 - accuracy: 0.7602 - val_loss: 0.4427 - val_accuracy: 0.7676 - 497ms/epoch - 3ms/step\n","Epoch 45/1000\n","144/144 - 0s - loss: 0.4560 - accuracy: 0.7661 - val_loss: 0.5274 - val_accuracy: 0.7383 - 471ms/epoch - 3ms/step\n","Epoch 46/1000\n","144/144 - 0s - loss: 0.4540 - accuracy: 0.7641 - val_loss: 0.4560 - val_accuracy: 0.7715 - 474ms/epoch - 3ms/step\n","Epoch 47/1000\n","144/144 - 0s - loss: 0.4531 - accuracy: 0.7635 - val_loss: 0.4697 - val_accuracy: 0.7793 - 457ms/epoch - 3ms/step\n","Epoch 48/1000\n","144/144 - 0s - loss: 0.4510 - accuracy: 0.7650 - val_loss: 0.5034 - val_accuracy: 0.7422 - 477ms/epoch - 3ms/step\n","Epoch 49/1000\n","144/144 - 0s - loss: 0.4549 - accuracy: 0.7639 - val_loss: 0.4490 - val_accuracy: 0.7793 - 491ms/epoch - 3ms/step\n","Epoch 50/1000\n","144/144 - 0s - loss: 0.4528 - accuracy: 0.7626 - val_loss: 0.4451 - val_accuracy: 0.7734 - 470ms/epoch - 3ms/step\n","Epoch 51/1000\n","144/144 - 0s - loss: 0.4538 - accuracy: 0.7637 - val_loss: 0.4700 - val_accuracy: 0.7480 - 490ms/epoch - 3ms/step\n","Epoch 52/1000\n","144/144 - 0s - loss: 0.4454 - accuracy: 0.7717 - val_loss: 0.4656 - val_accuracy: 0.7617 - 476ms/epoch - 3ms/step\n","Epoch 53/1000\n","144/144 - 0s - loss: 0.4470 - accuracy: 0.7652 - val_loss: 0.4380 - val_accuracy: 0.7910 - 492ms/epoch - 3ms/step\n","Epoch 54/1000\n","144/144 - 0s - loss: 0.4433 - accuracy: 0.7752 - val_loss: 0.4469 - val_accuracy: 0.7793 - 471ms/epoch - 3ms/step\n","Epoch 55/1000\n","144/144 - 0s - loss: 0.4411 - accuracy: 0.7702 - val_loss: 0.4299 - val_accuracy: 0.7930 - 488ms/epoch - 3ms/step\n","Epoch 56/1000\n","144/144 - 0s - loss: 0.4371 - accuracy: 0.7735 - val_loss: 0.4786 - val_accuracy: 0.7598 - 458ms/epoch - 3ms/step\n","Epoch 57/1000\n","144/144 - 0s - loss: 0.4589 - accuracy: 0.7617 - val_loss: 0.4378 - val_accuracy: 0.7930 - 459ms/epoch - 3ms/step\n","Epoch 58/1000\n","144/144 - 0s - loss: 0.4385 - accuracy: 0.7737 - val_loss: 0.4451 - val_accuracy: 0.7871 - 486ms/epoch - 3ms/step\n","Epoch 59/1000\n","144/144 - 0s - loss: 0.4402 - accuracy: 0.7691 - val_loss: 0.4444 - val_accuracy: 0.7715 - 469ms/epoch - 3ms/step\n","Epoch 60/1000\n","144/144 - 0s - loss: 0.4367 - accuracy: 0.7739 - val_loss: 0.4299 - val_accuracy: 0.7852 - 473ms/epoch - 3ms/step\n","Epoch 61/1000\n","144/144 - 0s - loss: 0.4495 - accuracy: 0.7728 - val_loss: 0.4734 - val_accuracy: 0.7598 - 495ms/epoch - 3ms/step\n","Epoch 62/1000\n","144/144 - 0s - loss: 0.4429 - accuracy: 0.7726 - val_loss: 0.4612 - val_accuracy: 0.7578 - 473ms/epoch - 3ms/step\n","Epoch 63/1000\n","144/144 - 0s - loss: 0.4329 - accuracy: 0.7783 - val_loss: 0.4268 - val_accuracy: 0.7949 - 494ms/epoch - 3ms/step\n","Epoch 64/1000\n","144/144 - 0s - loss: 0.4376 - accuracy: 0.7754 - val_loss: 0.4670 - val_accuracy: 0.7559 - 464ms/epoch - 3ms/step\n","Epoch 65/1000\n","144/144 - 0s - loss: 0.4403 - accuracy: 0.7750 - val_loss: 0.4304 - val_accuracy: 0.8008 - 462ms/epoch - 3ms/step\n","Epoch 66/1000\n","144/144 - 0s - loss: 0.4288 - accuracy: 0.7785 - val_loss: 0.4353 - val_accuracy: 0.7891 - 455ms/epoch - 3ms/step\n","Epoch 67/1000\n","144/144 - 1s - loss: 0.4427 - accuracy: 0.7724 - val_loss: 0.4821 - val_accuracy: 0.7617 - 500ms/epoch - 3ms/step\n","Epoch 68/1000\n","144/144 - 0s - loss: 0.4338 - accuracy: 0.7761 - val_loss: 0.4235 - val_accuracy: 0.7910 - 463ms/epoch - 3ms/step\n","Epoch 69/1000\n","144/144 - 1s - loss: 0.4343 - accuracy: 0.7767 - val_loss: 0.4243 - val_accuracy: 0.7949 - 509ms/epoch - 4ms/step\n","Epoch 70/1000\n","144/144 - 0s - loss: 0.4379 - accuracy: 0.7724 - val_loss: 0.4314 - val_accuracy: 0.7754 - 462ms/epoch - 3ms/step\n","Epoch 71/1000\n","144/144 - 0s - loss: 0.4289 - accuracy: 0.7796 - val_loss: 0.4255 - val_accuracy: 0.7891 - 496ms/epoch - 3ms/step\n","Epoch 72/1000\n","144/144 - 1s - loss: 0.4366 - accuracy: 0.7761 - val_loss: 0.4282 - val_accuracy: 0.7910 - 583ms/epoch - 4ms/step\n","Epoch 73/1000\n","144/144 - 1s - loss: 0.4259 - accuracy: 0.7774 - val_loss: 0.4757 - val_accuracy: 0.7617 - 653ms/epoch - 5ms/step\n","Epoch 74/1000\n","144/144 - 1s - loss: 0.4309 - accuracy: 0.7713 - val_loss: 0.4229 - val_accuracy: 0.7988 - 682ms/epoch - 5ms/step\n","Epoch 75/1000\n","144/144 - 1s - loss: 0.4193 - accuracy: 0.7867 - val_loss: 0.4465 - val_accuracy: 0.7852 - 583ms/epoch - 4ms/step\n","Epoch 76/1000\n","144/144 - 0s - loss: 0.4281 - accuracy: 0.7833 - val_loss: 0.4268 - val_accuracy: 0.7734 - 496ms/epoch - 3ms/step\n","Epoch 77/1000\n","144/144 - 0s - loss: 0.4203 - accuracy: 0.7817 - val_loss: 0.4434 - val_accuracy: 0.7910 - 488ms/epoch - 3ms/step\n","Epoch 78/1000\n","144/144 - 0s - loss: 0.4306 - accuracy: 0.7759 - val_loss: 0.6482 - val_accuracy: 0.6914 - 495ms/epoch - 3ms/step\n","Epoch 79/1000\n","144/144 - 1s - loss: 0.4427 - accuracy: 0.7709 - val_loss: 0.4208 - val_accuracy: 0.7949 - 502ms/epoch - 3ms/step\n","Epoch 80/1000\n","144/144 - 0s - loss: 0.4350 - accuracy: 0.7804 - val_loss: 0.4215 - val_accuracy: 0.7891 - 462ms/epoch - 3ms/step\n","Epoch 81/1000\n","144/144 - 0s - loss: 0.4253 - accuracy: 0.7843 - val_loss: 0.4367 - val_accuracy: 0.7910 - 452ms/epoch - 3ms/step\n","Epoch 82/1000\n","144/144 - 0s - loss: 0.4292 - accuracy: 0.7804 - val_loss: 0.4272 - val_accuracy: 0.7852 - 482ms/epoch - 3ms/step\n","Epoch 83/1000\n","144/144 - 0s - loss: 0.4267 - accuracy: 0.7785 - val_loss: 0.4380 - val_accuracy: 0.7715 - 445ms/epoch - 3ms/step\n","Epoch 84/1000\n","144/144 - 0s - loss: 0.4218 - accuracy: 0.7880 - val_loss: 0.4189 - val_accuracy: 0.7930 - 499ms/epoch - 3ms/step\n","Epoch 85/1000\n","144/144 - 0s - loss: 0.4261 - accuracy: 0.7833 - val_loss: 0.4480 - val_accuracy: 0.7852 - 445ms/epoch - 3ms/step\n","Epoch 86/1000\n","144/144 - 0s - loss: 0.4291 - accuracy: 0.7826 - val_loss: 0.4364 - val_accuracy: 0.7910 - 482ms/epoch - 3ms/step\n","Epoch 87/1000\n","144/144 - 0s - loss: 0.4238 - accuracy: 0.7876 - val_loss: 0.4363 - val_accuracy: 0.7832 - 477ms/epoch - 3ms/step\n","Epoch 88/1000\n","144/144 - 0s - loss: 0.4350 - accuracy: 0.7761 - val_loss: 0.4284 - val_accuracy: 0.7988 - 465ms/epoch - 3ms/step\n","Epoch 89/1000\n","144/144 - 0s - loss: 0.4225 - accuracy: 0.7852 - val_loss: 0.4430 - val_accuracy: 0.7695 - 480ms/epoch - 3ms/step\n","Epoch 90/1000\n","144/144 - 0s - loss: 0.4204 - accuracy: 0.7870 - val_loss: 0.4288 - val_accuracy: 0.7969 - 455ms/epoch - 3ms/step\n","Epoch 91/1000\n","144/144 - 0s - loss: 0.4222 - accuracy: 0.7804 - val_loss: 0.4253 - val_accuracy: 0.7871 - 460ms/epoch - 3ms/step\n","Epoch 92/1000\n","144/144 - 0s - loss: 0.4249 - accuracy: 0.7833 - val_loss: 0.4332 - val_accuracy: 0.7852 - 461ms/epoch - 3ms/step\n","Epoch 93/1000\n","144/144 - 0s - loss: 0.4283 - accuracy: 0.7835 - val_loss: 0.4256 - val_accuracy: 0.7871 - 489ms/epoch - 3ms/step\n","Epoch 94/1000\n","144/144 - 0s - loss: 0.4168 - accuracy: 0.7835 - val_loss: 0.4217 - val_accuracy: 0.7891 - 471ms/epoch - 3ms/step\n","Epoch 95/1000\n","144/144 - 1s - loss: 0.4189 - accuracy: 0.7878 - val_loss: 0.4300 - val_accuracy: 0.7969 - 503ms/epoch - 3ms/step\n","Epoch 96/1000\n","144/144 - 0s - loss: 0.4127 - accuracy: 0.7876 - val_loss: 0.4246 - val_accuracy: 0.8008 - 475ms/epoch - 3ms/step\n","Epoch 97/1000\n","144/144 - 0s - loss: 0.4123 - accuracy: 0.7880 - val_loss: 0.4304 - val_accuracy: 0.7930 - 490ms/epoch - 3ms/step\n","Epoch 98/1000\n","144/144 - 0s - loss: 0.4174 - accuracy: 0.7846 - val_loss: 0.4164 - val_accuracy: 0.8047 - 465ms/epoch - 3ms/step\n","Epoch 99/1000\n","144/144 - 0s - loss: 0.4150 - accuracy: 0.7902 - val_loss: 0.5022 - val_accuracy: 0.7520 - 450ms/epoch - 3ms/step\n","Epoch 100/1000\n","144/144 - 0s - loss: 0.4202 - accuracy: 0.7833 - val_loss: 0.4216 - val_accuracy: 0.7930 - 451ms/epoch - 3ms/step\n","Epoch 101/1000\n","144/144 - 0s - loss: 0.4286 - accuracy: 0.7835 - val_loss: 0.4371 - val_accuracy: 0.7930 - 494ms/epoch - 3ms/step\n","Epoch 102/1000\n","144/144 - 0s - loss: 0.4121 - accuracy: 0.7935 - val_loss: 0.4269 - val_accuracy: 0.7871 - 484ms/epoch - 3ms/step\n","Epoch 103/1000\n","144/144 - 0s - loss: 0.4139 - accuracy: 0.7870 - val_loss: 0.4304 - val_accuracy: 0.7832 - 448ms/epoch - 3ms/step\n","Epoch 104/1000\n","144/144 - 0s - loss: 0.4150 - accuracy: 0.7898 - val_loss: 0.4309 - val_accuracy: 0.7910 - 490ms/epoch - 3ms/step\n","Epoch 105/1000\n","144/144 - 0s - loss: 0.4153 - accuracy: 0.7911 - val_loss: 0.4392 - val_accuracy: 0.7754 - 492ms/epoch - 3ms/step\n","Epoch 106/1000\n","144/144 - 0s - loss: 0.4218 - accuracy: 0.7850 - val_loss: 0.4128 - val_accuracy: 0.8027 - 461ms/epoch - 3ms/step\n","Epoch 107/1000\n","144/144 - 0s - loss: 0.4081 - accuracy: 0.7963 - val_loss: 0.4153 - val_accuracy: 0.7793 - 443ms/epoch - 3ms/step\n","Epoch 108/1000\n","144/144 - 0s - loss: 0.4157 - accuracy: 0.7859 - val_loss: 0.4305 - val_accuracy: 0.7910 - 479ms/epoch - 3ms/step\n","Epoch 109/1000\n","144/144 - 0s - loss: 0.4104 - accuracy: 0.7893 - val_loss: 0.4242 - val_accuracy: 0.7832 - 487ms/epoch - 3ms/step\n","Epoch 110/1000\n","144/144 - 0s - loss: 0.4090 - accuracy: 0.7939 - val_loss: 0.4160 - val_accuracy: 0.7930 - 472ms/epoch - 3ms/step\n","Epoch 111/1000\n","144/144 - 0s - loss: 0.4056 - accuracy: 0.7974 - val_loss: 0.4138 - val_accuracy: 0.7910 - 490ms/epoch - 3ms/step\n","Epoch 112/1000\n","144/144 - 0s - loss: 0.4160 - accuracy: 0.7952 - val_loss: 0.4387 - val_accuracy: 0.7832 - 459ms/epoch - 3ms/step\n","Epoch 113/1000\n","144/144 - 0s - loss: 0.4149 - accuracy: 0.7902 - val_loss: 0.4148 - val_accuracy: 0.7871 - 497ms/epoch - 3ms/step\n","Epoch 114/1000\n","144/144 - 0s - loss: 0.4144 - accuracy: 0.7880 - val_loss: 0.4257 - val_accuracy: 0.7852 - 486ms/epoch - 3ms/step\n","Epoch 115/1000\n","144/144 - 0s - loss: 0.4159 - accuracy: 0.7909 - val_loss: 0.4458 - val_accuracy: 0.7812 - 478ms/epoch - 3ms/step\n","Epoch 116/1000\n","144/144 - 0s - loss: 0.4105 - accuracy: 0.7922 - val_loss: 0.4262 - val_accuracy: 0.7969 - 486ms/epoch - 3ms/step\n","Epoch 117/1000\n","144/144 - 0s - loss: 0.4096 - accuracy: 0.7933 - val_loss: 0.4420 - val_accuracy: 0.7910 - 466ms/epoch - 3ms/step\n","Epoch 118/1000\n","144/144 - 0s - loss: 0.4090 - accuracy: 0.7926 - val_loss: 0.4113 - val_accuracy: 0.7871 - 457ms/epoch - 3ms/step\n","Epoch 119/1000\n","144/144 - 0s - loss: 0.4096 - accuracy: 0.7922 - val_loss: 0.4203 - val_accuracy: 0.8027 - 459ms/epoch - 3ms/step\n","Epoch 120/1000\n","144/144 - 0s - loss: 0.4087 - accuracy: 0.7922 - val_loss: 0.4837 - val_accuracy: 0.7695 - 489ms/epoch - 3ms/step\n","Epoch 121/1000\n","144/144 - 0s - loss: 0.4120 - accuracy: 0.7896 - val_loss: 0.4151 - val_accuracy: 0.8027 - 492ms/epoch - 3ms/step\n","Epoch 122/1000\n","144/144 - 0s - loss: 0.4055 - accuracy: 0.7972 - val_loss: 0.4258 - val_accuracy: 0.7832 - 459ms/epoch - 3ms/step\n","Epoch 123/1000\n","144/144 - 0s - loss: 0.4100 - accuracy: 0.7889 - val_loss: 0.4468 - val_accuracy: 0.7832 - 474ms/epoch - 3ms/step\n","Epoch 124/1000\n","144/144 - 0s - loss: 0.4150 - accuracy: 0.7854 - val_loss: 0.4602 - val_accuracy: 0.7715 - 457ms/epoch - 3ms/step\n","Epoch 125/1000\n","144/144 - 0s - loss: 0.4098 - accuracy: 0.7896 - val_loss: 0.4078 - val_accuracy: 0.8047 - 464ms/epoch - 3ms/step\n","Epoch 126/1000\n","144/144 - 0s - loss: 0.4047 - accuracy: 0.7924 - val_loss: 0.4139 - val_accuracy: 0.7871 - 457ms/epoch - 3ms/step\n","Epoch 127/1000\n","144/144 - 0s - loss: 0.4050 - accuracy: 0.7965 - val_loss: 0.4209 - val_accuracy: 0.8008 - 498ms/epoch - 3ms/step\n","Epoch 128/1000\n","144/144 - 0s - loss: 0.4034 - accuracy: 0.7983 - val_loss: 0.4205 - val_accuracy: 0.7949 - 456ms/epoch - 3ms/step\n","Epoch 129/1000\n","144/144 - 0s - loss: 0.3995 - accuracy: 0.7950 - val_loss: 0.4130 - val_accuracy: 0.7930 - 470ms/epoch - 3ms/step\n","Epoch 130/1000\n","144/144 - 0s - loss: 0.4090 - accuracy: 0.7939 - val_loss: 0.4178 - val_accuracy: 0.8125 - 452ms/epoch - 3ms/step\n","Epoch 131/1000\n","144/144 - 0s - loss: 0.4008 - accuracy: 0.8030 - val_loss: 0.4219 - val_accuracy: 0.7988 - 482ms/epoch - 3ms/step\n","Epoch 132/1000\n","144/144 - 0s - loss: 0.4092 - accuracy: 0.7922 - val_loss: 0.4235 - val_accuracy: 0.7969 - 450ms/epoch - 3ms/step\n","Epoch 133/1000\n","144/144 - 0s - loss: 0.4034 - accuracy: 0.8033 - val_loss: 0.4108 - val_accuracy: 0.8008 - 455ms/epoch - 3ms/step\n","Epoch 134/1000\n","144/144 - 0s - loss: 0.3998 - accuracy: 0.7950 - val_loss: 0.4213 - val_accuracy: 0.8086 - 499ms/epoch - 3ms/step\n","Epoch 135/1000\n","144/144 - 0s - loss: 0.4096 - accuracy: 0.7933 - val_loss: 0.4403 - val_accuracy: 0.7988 - 452ms/epoch - 3ms/step\n","Epoch 136/1000\n","144/144 - 0s - loss: 0.4008 - accuracy: 0.7904 - val_loss: 0.4231 - val_accuracy: 0.7852 - 467ms/epoch - 3ms/step\n","Epoch 137/1000\n","144/144 - 0s - loss: 0.4012 - accuracy: 0.7991 - val_loss: 0.4121 - val_accuracy: 0.7988 - 487ms/epoch - 3ms/step\n","Epoch 138/1000\n","144/144 - 0s - loss: 0.4047 - accuracy: 0.7976 - val_loss: 0.4289 - val_accuracy: 0.7871 - 470ms/epoch - 3ms/step\n","Epoch 139/1000\n","144/144 - 0s - loss: 0.3978 - accuracy: 0.7993 - val_loss: 0.4290 - val_accuracy: 0.7891 - 482ms/epoch - 3ms/step\n","Epoch 140/1000\n","144/144 - 0s - loss: 0.3939 - accuracy: 0.8022 - val_loss: 0.4076 - val_accuracy: 0.7969 - 456ms/epoch - 3ms/step\n","Epoch 141/1000\n","144/144 - 0s - loss: 0.4040 - accuracy: 0.7939 - val_loss: 0.4099 - val_accuracy: 0.7969 - 497ms/epoch - 3ms/step\n","Epoch 142/1000\n","144/144 - 0s - loss: 0.3930 - accuracy: 0.8052 - val_loss: 0.4416 - val_accuracy: 0.7988 - 458ms/epoch - 3ms/step\n","Epoch 143/1000\n","144/144 - 0s - loss: 0.3973 - accuracy: 0.7996 - val_loss: 0.4259 - val_accuracy: 0.7891 - 494ms/epoch - 3ms/step\n","Epoch 144/1000\n","144/144 - 0s - loss: 0.3980 - accuracy: 0.7991 - val_loss: 0.4084 - val_accuracy: 0.7988 - 475ms/epoch - 3ms/step\n","Epoch 145/1000\n","144/144 - 0s - loss: 0.3922 - accuracy: 0.7991 - val_loss: 0.4140 - val_accuracy: 0.8105 - 447ms/epoch - 3ms/step\n","Epoch 146/1000\n","144/144 - 0s - loss: 0.3890 - accuracy: 0.8059 - val_loss: 0.4171 - val_accuracy: 0.7949 - 468ms/epoch - 3ms/step\n","Epoch 147/1000\n","144/144 - 0s - loss: 0.3929 - accuracy: 0.8002 - val_loss: 0.4192 - val_accuracy: 0.7949 - 457ms/epoch - 3ms/step\n","Epoch 148/1000\n","144/144 - 0s - loss: 0.3943 - accuracy: 0.8026 - val_loss: 0.4190 - val_accuracy: 0.7891 - 483ms/epoch - 3ms/step\n","Epoch 149/1000\n","144/144 - 0s - loss: 0.3897 - accuracy: 0.8039 - val_loss: 0.4074 - val_accuracy: 0.8066 - 461ms/epoch - 3ms/step\n","Epoch 150/1000\n","144/144 - 0s - loss: 0.4015 - accuracy: 0.8024 - val_loss: 0.4126 - val_accuracy: 0.8066 - 489ms/epoch - 3ms/step\n","Epoch 151/1000\n","144/144 - 0s - loss: 0.4055 - accuracy: 0.7917 - val_loss: 0.4130 - val_accuracy: 0.8008 - 480ms/epoch - 3ms/step\n","Epoch 152/1000\n","144/144 - 0s - loss: 0.3936 - accuracy: 0.8076 - val_loss: 0.4121 - val_accuracy: 0.7891 - 461ms/epoch - 3ms/step\n","Epoch 153/1000\n","144/144 - 0s - loss: 0.4005 - accuracy: 0.7922 - val_loss: 0.4189 - val_accuracy: 0.7988 - 493ms/epoch - 3ms/step\n","Epoch 154/1000\n","144/144 - 0s - loss: 0.3878 - accuracy: 0.8022 - val_loss: 0.4156 - val_accuracy: 0.7949 - 450ms/epoch - 3ms/step\n","Epoch 155/1000\n","144/144 - 1s - loss: 0.3899 - accuracy: 0.8065 - val_loss: 0.4700 - val_accuracy: 0.7852 - 505ms/epoch - 4ms/step\n","Epoch 156/1000\n","144/144 - 0s - loss: 0.3936 - accuracy: 0.8033 - val_loss: 0.4382 - val_accuracy: 0.7930 - 454ms/epoch - 3ms/step\n","Epoch 157/1000\n","144/144 - 1s - loss: 0.3875 - accuracy: 0.8111 - val_loss: 0.4163 - val_accuracy: 0.8008 - 518ms/epoch - 4ms/step\n","Epoch 158/1000\n","144/144 - 0s - loss: 0.3905 - accuracy: 0.8150 - val_loss: 0.4220 - val_accuracy: 0.8145 - 476ms/epoch - 3ms/step\n","Epoch 159/1000\n","144/144 - 0s - loss: 0.3920 - accuracy: 0.8026 - val_loss: 0.4241 - val_accuracy: 0.8047 - 480ms/epoch - 3ms/step\n","Epoch 160/1000\n","144/144 - 0s - loss: 0.3907 - accuracy: 0.7996 - val_loss: 0.4255 - val_accuracy: 0.8066 - 445ms/epoch - 3ms/step\n","Epoch 161/1000\n","144/144 - 0s - loss: 0.3864 - accuracy: 0.8087 - val_loss: 0.4191 - val_accuracy: 0.8047 - 494ms/epoch - 3ms/step\n","Epoch 162/1000\n","144/144 - 0s - loss: 0.3944 - accuracy: 0.7985 - val_loss: 0.4330 - val_accuracy: 0.7871 - 481ms/epoch - 3ms/step\n","Epoch 163/1000\n","144/144 - 0s - loss: 0.3848 - accuracy: 0.8048 - val_loss: 0.4371 - val_accuracy: 0.8086 - 500ms/epoch - 3ms/step\n","Epoch 164/1000\n","144/144 - 0s - loss: 0.3923 - accuracy: 0.8057 - val_loss: 0.4119 - val_accuracy: 0.8086 - 454ms/epoch - 3ms/step\n","Epoch 165/1000\n","144/144 - 0s - loss: 0.3923 - accuracy: 0.8022 - val_loss: 0.4153 - val_accuracy: 0.7969 - 497ms/epoch - 3ms/step\n","Epoch 166/1000\n","144/144 - 0s - loss: 0.3940 - accuracy: 0.8050 - val_loss: 0.4262 - val_accuracy: 0.8008 - 465ms/epoch - 3ms/step\n","Epoch 167/1000\n","144/144 - 0s - loss: 0.3908 - accuracy: 0.8061 - val_loss: 0.4122 - val_accuracy: 0.8066 - 499ms/epoch - 3ms/step\n","Epoch 168/1000\n","144/144 - 0s - loss: 0.3908 - accuracy: 0.8063 - val_loss: 0.4208 - val_accuracy: 0.8008 - 448ms/epoch - 3ms/step\n","Epoch 169/1000\n","144/144 - 1s - loss: 0.3825 - accuracy: 0.8089 - val_loss: 0.4127 - val_accuracy: 0.8027 - 509ms/epoch - 4ms/step\n","Epoch 170/1000\n","144/144 - 0s - loss: 0.3945 - accuracy: 0.8048 - val_loss: 0.4807 - val_accuracy: 0.7656 - 494ms/epoch - 3ms/step\n","Epoch 171/1000\n","144/144 - 0s - loss: 0.3917 - accuracy: 0.8078 - val_loss: 0.4241 - val_accuracy: 0.7871 - 466ms/epoch - 3ms/step\n","Epoch 172/1000\n","144/144 - 0s - loss: 0.3786 - accuracy: 0.8115 - val_loss: 0.4111 - val_accuracy: 0.8086 - 443ms/epoch - 3ms/step\n","Epoch 173/1000\n","144/144 - 0s - loss: 0.3843 - accuracy: 0.8109 - val_loss: 0.4333 - val_accuracy: 0.7930 - 484ms/epoch - 3ms/step\n","Epoch 174/1000\n","144/144 - 0s - loss: 0.3882 - accuracy: 0.8111 - val_loss: 0.4224 - val_accuracy: 0.8086 - 474ms/epoch - 3ms/step\n","Epoch 175/1000\n","144/144 - 0s - loss: 0.3886 - accuracy: 0.8096 - val_loss: 0.4126 - val_accuracy: 0.8066 - 440ms/epoch - 3ms/step\n","Epoch 176/1000\n","144/144 - 0s - loss: 0.3843 - accuracy: 0.8083 - val_loss: 0.4191 - val_accuracy: 0.8086 - 459ms/epoch - 3ms/step\n","Epoch 177/1000\n","144/144 - 0s - loss: 0.3835 - accuracy: 0.8143 - val_loss: 0.4311 - val_accuracy: 0.8047 - 423ms/epoch - 3ms/step\n","Epoch 178/1000\n","144/144 - 0s - loss: 0.4035 - accuracy: 0.7967 - val_loss: 0.4233 - val_accuracy: 0.7969 - 483ms/epoch - 3ms/step\n","Epoch 179/1000\n","144/144 - 0s - loss: 0.3874 - accuracy: 0.8063 - val_loss: 0.4207 - val_accuracy: 0.7949 - 428ms/epoch - 3ms/step\n","Epoch 180/1000\n","144/144 - 0s - loss: 0.3811 - accuracy: 0.8107 - val_loss: 0.4382 - val_accuracy: 0.7949 - 463ms/epoch - 3ms/step\n","Epoch 181/1000\n","144/144 - 0s - loss: 0.3789 - accuracy: 0.8126 - val_loss: 0.4232 - val_accuracy: 0.8105 - 460ms/epoch - 3ms/step\n","Epoch 182/1000\n","144/144 - 0s - loss: 0.3837 - accuracy: 0.8067 - val_loss: 0.4151 - val_accuracy: 0.8145 - 427ms/epoch - 3ms/step\n","Epoch 183/1000\n","144/144 - 0s - loss: 0.3835 - accuracy: 0.8083 - val_loss: 0.4031 - val_accuracy: 0.8145 - 457ms/epoch - 3ms/step\n","Epoch 184/1000\n","144/144 - 0s - loss: 0.3857 - accuracy: 0.8093 - val_loss: 0.4053 - val_accuracy: 0.8105 - 479ms/epoch - 3ms/step\n","Epoch 185/1000\n","144/144 - 0s - loss: 0.3823 - accuracy: 0.8146 - val_loss: 0.4265 - val_accuracy: 0.8027 - 418ms/epoch - 3ms/step\n","Epoch 186/1000\n","144/144 - 0s - loss: 0.3799 - accuracy: 0.8163 - val_loss: 0.4076 - val_accuracy: 0.8145 - 460ms/epoch - 3ms/step\n","Epoch 187/1000\n","144/144 - 0s - loss: 0.3668 - accuracy: 0.8185 - val_loss: 0.4228 - val_accuracy: 0.8086 - 482ms/epoch - 3ms/step\n","Epoch 188/1000\n","144/144 - 0s - loss: 0.3760 - accuracy: 0.8137 - val_loss: 0.4098 - val_accuracy: 0.8125 - 460ms/epoch - 3ms/step\n","Epoch 189/1000\n","144/144 - 0s - loss: 0.3721 - accuracy: 0.8159 - val_loss: 0.4183 - val_accuracy: 0.8203 - 429ms/epoch - 3ms/step\n","Epoch 190/1000\n","144/144 - 0s - loss: 0.3733 - accuracy: 0.8141 - val_loss: 0.4887 - val_accuracy: 0.7754 - 467ms/epoch - 3ms/step\n","Epoch 191/1000\n","144/144 - 0s - loss: 0.3868 - accuracy: 0.8113 - val_loss: 0.4098 - val_accuracy: 0.8203 - 466ms/epoch - 3ms/step\n","Epoch 192/1000\n","144/144 - 0s - loss: 0.3673 - accuracy: 0.8204 - val_loss: 0.4096 - val_accuracy: 0.8066 - 462ms/epoch - 3ms/step\n","Epoch 193/1000\n","144/144 - 0s - loss: 0.3775 - accuracy: 0.8141 - val_loss: 0.4195 - val_accuracy: 0.8145 - 438ms/epoch - 3ms/step\n","Epoch 194/1000\n","144/144 - 0s - loss: 0.3764 - accuracy: 0.8167 - val_loss: 0.4055 - val_accuracy: 0.8105 - 426ms/epoch - 3ms/step\n","Epoch 195/1000\n","144/144 - 0s - loss: 0.3727 - accuracy: 0.8172 - val_loss: 0.4272 - val_accuracy: 0.8105 - 420ms/epoch - 3ms/step\n","Epoch 196/1000\n","144/144 - 0s - loss: 0.3809 - accuracy: 0.8104 - val_loss: 0.4360 - val_accuracy: 0.7949 - 464ms/epoch - 3ms/step\n","Epoch 197/1000\n","144/144 - 0s - loss: 0.3726 - accuracy: 0.8200 - val_loss: 0.4143 - val_accuracy: 0.8066 - 460ms/epoch - 3ms/step\n","Epoch 198/1000\n","144/144 - 0s - loss: 0.3682 - accuracy: 0.8193 - val_loss: 0.4372 - val_accuracy: 0.7988 - 467ms/epoch - 3ms/step\n","Epoch 199/1000\n","144/144 - 0s - loss: 0.3725 - accuracy: 0.8176 - val_loss: 0.4079 - val_accuracy: 0.8105 - 437ms/epoch - 3ms/step\n","Epoch 200/1000\n","144/144 - 0s - loss: 0.3721 - accuracy: 0.8243 - val_loss: 0.4093 - val_accuracy: 0.8066 - 468ms/epoch - 3ms/step\n","Epoch 201/1000\n","144/144 - 0s - loss: 0.3740 - accuracy: 0.8235 - val_loss: 0.4063 - val_accuracy: 0.8105 - 420ms/epoch - 3ms/step\n","Epoch 202/1000\n","144/144 - 0s - loss: 0.3706 - accuracy: 0.8191 - val_loss: 0.4132 - val_accuracy: 0.8027 - 431ms/epoch - 3ms/step\n","Epoch 203/1000\n","144/144 - 0s - loss: 0.3714 - accuracy: 0.8157 - val_loss: 0.4282 - val_accuracy: 0.8164 - 423ms/epoch - 3ms/step\n","Epoch 204/1000\n","144/144 - 0s - loss: 0.3684 - accuracy: 0.8163 - val_loss: 0.4076 - val_accuracy: 0.8145 - 424ms/epoch - 3ms/step\n","Epoch 205/1000\n","144/144 - 0s - loss: 0.3636 - accuracy: 0.8237 - val_loss: 0.4162 - val_accuracy: 0.8145 - 428ms/epoch - 3ms/step\n","Epoch 206/1000\n","144/144 - 0s - loss: 0.3662 - accuracy: 0.8228 - val_loss: 0.4100 - val_accuracy: 0.8145 - 428ms/epoch - 3ms/step\n","Epoch 207/1000\n","144/144 - 0s - loss: 0.3718 - accuracy: 0.8161 - val_loss: 0.4308 - val_accuracy: 0.8027 - 434ms/epoch - 3ms/step\n","Epoch 208/1000\n","144/144 - 0s - loss: 0.3633 - accuracy: 0.8235 - val_loss: 0.4081 - val_accuracy: 0.8164 - 420ms/epoch - 3ms/step\n","Epoch 209/1000\n","144/144 - 0s - loss: 0.3777 - accuracy: 0.8124 - val_loss: 0.4515 - val_accuracy: 0.7910 - 435ms/epoch - 3ms/step\n","Epoch 210/1000\n","144/144 - 0s - loss: 0.3658 - accuracy: 0.8200 - val_loss: 0.4495 - val_accuracy: 0.7969 - 418ms/epoch - 3ms/step\n","Epoch 211/1000\n","144/144 - 0s - loss: 0.3627 - accuracy: 0.8250 - val_loss: 0.4012 - val_accuracy: 0.8281 - 423ms/epoch - 3ms/step\n","Epoch 212/1000\n","144/144 - 0s - loss: 0.3614 - accuracy: 0.8217 - val_loss: 0.4120 - val_accuracy: 0.8184 - 473ms/epoch - 3ms/step\n","Epoch 213/1000\n","144/144 - 0s - loss: 0.3618 - accuracy: 0.8209 - val_loss: 0.4091 - val_accuracy: 0.8125 - 435ms/epoch - 3ms/step\n","Epoch 214/1000\n","144/144 - 0s - loss: 0.3753 - accuracy: 0.8130 - val_loss: 0.4176 - val_accuracy: 0.8164 - 466ms/epoch - 3ms/step\n","Epoch 215/1000\n","144/144 - 0s - loss: 0.3636 - accuracy: 0.8241 - val_loss: 0.4223 - val_accuracy: 0.8164 - 444ms/epoch - 3ms/step\n","Epoch 216/1000\n","144/144 - 0s - loss: 0.3593 - accuracy: 0.8261 - val_loss: 0.4089 - val_accuracy: 0.8105 - 462ms/epoch - 3ms/step\n","Epoch 217/1000\n","144/144 - 0s - loss: 0.3544 - accuracy: 0.8280 - val_loss: 0.4112 - val_accuracy: 0.8105 - 419ms/epoch - 3ms/step\n","Epoch 218/1000\n","144/144 - 0s - loss: 0.3577 - accuracy: 0.8254 - val_loss: 0.4084 - val_accuracy: 0.8242 - 418ms/epoch - 3ms/step\n","Epoch 219/1000\n","144/144 - 0s - loss: 0.3564 - accuracy: 0.8237 - val_loss: 0.4236 - val_accuracy: 0.8027 - 462ms/epoch - 3ms/step\n","Epoch 220/1000\n","144/144 - 0s - loss: 0.3579 - accuracy: 0.8213 - val_loss: 0.4042 - val_accuracy: 0.8281 - 423ms/epoch - 3ms/step\n","Epoch 221/1000\n","144/144 - 0s - loss: 0.3545 - accuracy: 0.8293 - val_loss: 0.4140 - val_accuracy: 0.8203 - 452ms/epoch - 3ms/step\n","Epoch 222/1000\n","144/144 - 0s - loss: 0.3499 - accuracy: 0.8283 - val_loss: 0.4299 - val_accuracy: 0.8125 - 461ms/epoch - 3ms/step\n","Epoch 223/1000\n","144/144 - 0s - loss: 0.3513 - accuracy: 0.8257 - val_loss: 0.4930 - val_accuracy: 0.7754 - 441ms/epoch - 3ms/step\n","Epoch 224/1000\n","144/144 - 0s - loss: 0.3613 - accuracy: 0.8276 - val_loss: 0.4759 - val_accuracy: 0.7910 - 426ms/epoch - 3ms/step\n","Epoch 225/1000\n","144/144 - 0s - loss: 0.3535 - accuracy: 0.8313 - val_loss: 0.4123 - val_accuracy: 0.8164 - 451ms/epoch - 3ms/step\n","Epoch 226/1000\n","144/144 - 0s - loss: 0.3610 - accuracy: 0.8178 - val_loss: 0.4088 - val_accuracy: 0.8145 - 445ms/epoch - 3ms/step\n","Epoch 227/1000\n","144/144 - 0s - loss: 0.3563 - accuracy: 0.8300 - val_loss: 0.4167 - val_accuracy: 0.8125 - 427ms/epoch - 3ms/step\n","Epoch 228/1000\n","144/144 - 0s - loss: 0.3547 - accuracy: 0.8287 - val_loss: 0.4148 - val_accuracy: 0.8379 - 463ms/epoch - 3ms/step\n","Epoch 229/1000\n","144/144 - 0s - loss: 0.3633 - accuracy: 0.8291 - val_loss: 0.4220 - val_accuracy: 0.8203 - 420ms/epoch - 3ms/step\n","Epoch 230/1000\n","144/144 - 0s - loss: 0.3562 - accuracy: 0.8274 - val_loss: 0.4153 - val_accuracy: 0.8262 - 430ms/epoch - 3ms/step\n","Epoch 231/1000\n","144/144 - 0s - loss: 0.3517 - accuracy: 0.8261 - val_loss: 0.4121 - val_accuracy: 0.8242 - 465ms/epoch - 3ms/step\n","Epoch 232/1000\n","144/144 - 0s - loss: 0.3526 - accuracy: 0.8298 - val_loss: 0.4252 - val_accuracy: 0.8125 - 429ms/epoch - 3ms/step\n","Epoch 233/1000\n","144/144 - 0s - loss: 0.3561 - accuracy: 0.8257 - val_loss: 0.4141 - val_accuracy: 0.8145 - 465ms/epoch - 3ms/step\n","Epoch 234/1000\n","144/144 - 0s - loss: 0.3515 - accuracy: 0.8285 - val_loss: 0.4359 - val_accuracy: 0.8008 - 460ms/epoch - 3ms/step\n","Epoch 235/1000\n","144/144 - 0s - loss: 0.3515 - accuracy: 0.8302 - val_loss: 0.4066 - val_accuracy: 0.8262 - 419ms/epoch - 3ms/step\n","Epoch 236/1000\n","144/144 - 0s - loss: 0.3513 - accuracy: 0.8243 - val_loss: 0.4373 - val_accuracy: 0.8066 - 425ms/epoch - 3ms/step\n","Epoch 237/1000\n","144/144 - 0s - loss: 0.3468 - accuracy: 0.8315 - val_loss: 0.4413 - val_accuracy: 0.8105 - 478ms/epoch - 3ms/step\n","Epoch 238/1000\n","144/144 - 0s - loss: 0.3504 - accuracy: 0.8224 - val_loss: 0.3976 - val_accuracy: 0.8223 - 468ms/epoch - 3ms/step\n","Epoch 239/1000\n","144/144 - 0s - loss: 0.3484 - accuracy: 0.8285 - val_loss: 0.4862 - val_accuracy: 0.7832 - 428ms/epoch - 3ms/step\n","Epoch 240/1000\n","144/144 - 0s - loss: 0.3468 - accuracy: 0.8311 - val_loss: 0.4049 - val_accuracy: 0.8281 - 458ms/epoch - 3ms/step\n","Epoch 241/1000\n","144/144 - 0s - loss: 0.3503 - accuracy: 0.8309 - val_loss: 0.4205 - val_accuracy: 0.8223 - 438ms/epoch - 3ms/step\n","Epoch 242/1000\n","144/144 - 0s - loss: 0.3470 - accuracy: 0.8322 - val_loss: 0.4163 - val_accuracy: 0.8281 - 461ms/epoch - 3ms/step\n","Epoch 243/1000\n","144/144 - 0s - loss: 0.3440 - accuracy: 0.8287 - val_loss: 0.4193 - val_accuracy: 0.8320 - 458ms/epoch - 3ms/step\n","Epoch 244/1000\n","144/144 - 0s - loss: 0.3514 - accuracy: 0.8280 - val_loss: 0.4317 - val_accuracy: 0.8125 - 467ms/epoch - 3ms/step\n","Epoch 245/1000\n","144/144 - 0s - loss: 0.3439 - accuracy: 0.8320 - val_loss: 0.4177 - val_accuracy: 0.8320 - 486ms/epoch - 3ms/step\n","Epoch 246/1000\n","144/144 - 0s - loss: 0.3473 - accuracy: 0.8309 - val_loss: 0.4309 - val_accuracy: 0.8184 - 426ms/epoch - 3ms/step\n","Epoch 247/1000\n","144/144 - 0s - loss: 0.3472 - accuracy: 0.8285 - val_loss: 0.4231 - val_accuracy: 0.8301 - 459ms/epoch - 3ms/step\n","Epoch 248/1000\n","144/144 - 0s - loss: 0.3466 - accuracy: 0.8372 - val_loss: 0.4114 - val_accuracy: 0.8301 - 468ms/epoch - 3ms/step\n","Epoch 249/1000\n","144/144 - 0s - loss: 0.3395 - accuracy: 0.8328 - val_loss: 0.4319 - val_accuracy: 0.8125 - 434ms/epoch - 3ms/step\n","Epoch 250/1000\n","144/144 - 0s - loss: 0.3634 - accuracy: 0.8167 - val_loss: 0.4209 - val_accuracy: 0.8203 - 432ms/epoch - 3ms/step\n","Epoch 251/1000\n","144/144 - 0s - loss: 0.3445 - accuracy: 0.8328 - val_loss: 0.4330 - val_accuracy: 0.8125 - 479ms/epoch - 3ms/step\n","Epoch 252/1000\n","144/144 - 0s - loss: 0.3550 - accuracy: 0.8226 - val_loss: 0.4823 - val_accuracy: 0.7754 - 442ms/epoch - 3ms/step\n","Epoch 253/1000\n","144/144 - 0s - loss: 0.3462 - accuracy: 0.8243 - val_loss: 0.4823 - val_accuracy: 0.8086 - 421ms/epoch - 3ms/step\n","Epoch 254/1000\n","144/144 - 0s - loss: 0.3433 - accuracy: 0.8320 - val_loss: 0.4181 - val_accuracy: 0.8242 - 432ms/epoch - 3ms/step\n","Epoch 255/1000\n","144/144 - 0s - loss: 0.3388 - accuracy: 0.8367 - val_loss: 0.4173 - val_accuracy: 0.8203 - 454ms/epoch - 3ms/step\n","Epoch 256/1000\n","144/144 - 0s - loss: 0.3415 - accuracy: 0.8385 - val_loss: 0.4254 - val_accuracy: 0.8242 - 423ms/epoch - 3ms/step\n","Epoch 257/1000\n","144/144 - 0s - loss: 0.3336 - accuracy: 0.8391 - val_loss: 0.4147 - val_accuracy: 0.8105 - 461ms/epoch - 3ms/step\n","Epoch 258/1000\n","144/144 - 0s - loss: 0.3446 - accuracy: 0.8335 - val_loss: 0.4437 - val_accuracy: 0.8281 - 467ms/epoch - 3ms/step\n","Epoch 259/1000\n","144/144 - 0s - loss: 0.3359 - accuracy: 0.8361 - val_loss: 0.4334 - val_accuracy: 0.8262 - 434ms/epoch - 3ms/step\n","Epoch 260/1000\n","144/144 - 0s - loss: 0.3367 - accuracy: 0.8354 - val_loss: 0.4162 - val_accuracy: 0.8262 - 416ms/epoch - 3ms/step\n","Epoch 261/1000\n","144/144 - 0s - loss: 0.3286 - accuracy: 0.8402 - val_loss: 0.4146 - val_accuracy: 0.8203 - 435ms/epoch - 3ms/step\n","Epoch 262/1000\n","144/144 - 0s - loss: 0.3322 - accuracy: 0.8352 - val_loss: 0.4209 - val_accuracy: 0.8281 - 459ms/epoch - 3ms/step\n","Epoch 263/1000\n","144/144 - 0s - loss: 0.3426 - accuracy: 0.8378 - val_loss: 0.4349 - val_accuracy: 0.8125 - 420ms/epoch - 3ms/step\n","Epoch 264/1000\n","144/144 - 0s - loss: 0.3354 - accuracy: 0.8367 - val_loss: 0.4292 - val_accuracy: 0.8281 - 422ms/epoch - 3ms/step\n","Epoch 265/1000\n","144/144 - 0s - loss: 0.3312 - accuracy: 0.8346 - val_loss: 0.4129 - val_accuracy: 0.8340 - 449ms/epoch - 3ms/step\n","Epoch 266/1000\n","144/144 - 0s - loss: 0.3322 - accuracy: 0.8383 - val_loss: 0.4738 - val_accuracy: 0.7832 - 475ms/epoch - 3ms/step\n","Epoch 267/1000\n","144/144 - 0s - loss: 0.3361 - accuracy: 0.8337 - val_loss: 0.4196 - val_accuracy: 0.8281 - 451ms/epoch - 3ms/step\n","Epoch 268/1000\n","144/144 - 0s - loss: 0.3329 - accuracy: 0.8404 - val_loss: 0.4494 - val_accuracy: 0.8105 - 462ms/epoch - 3ms/step\n","Epoch 269/1000\n","144/144 - 0s - loss: 0.3297 - accuracy: 0.8433 - val_loss: 0.4152 - val_accuracy: 0.8301 - 449ms/epoch - 3ms/step\n","Epoch 270/1000\n","144/144 - 0s - loss: 0.3362 - accuracy: 0.8313 - val_loss: 0.4260 - val_accuracy: 0.8145 - 457ms/epoch - 3ms/step\n","Epoch 271/1000\n","144/144 - 0s - loss: 0.3378 - accuracy: 0.8357 - val_loss: 0.4245 - val_accuracy: 0.8184 - 415ms/epoch - 3ms/step\n","Epoch 272/1000\n","144/144 - 0s - loss: 0.3249 - accuracy: 0.8437 - val_loss: 0.4213 - val_accuracy: 0.8242 - 425ms/epoch - 3ms/step\n","Epoch 273/1000\n","144/144 - 0s - loss: 0.3338 - accuracy: 0.8365 - val_loss: 0.4220 - val_accuracy: 0.8301 - 424ms/epoch - 3ms/step\n","Epoch 274/1000\n","144/144 - 0s - loss: 0.3279 - accuracy: 0.8420 - val_loss: 0.4285 - val_accuracy: 0.8262 - 459ms/epoch - 3ms/step\n","Epoch 275/1000\n","144/144 - 0s - loss: 0.3327 - accuracy: 0.8393 - val_loss: 0.4318 - val_accuracy: 0.8223 - 476ms/epoch - 3ms/step\n","Epoch 276/1000\n","144/144 - 0s - loss: 0.3336 - accuracy: 0.8365 - val_loss: 0.4264 - val_accuracy: 0.8320 - 420ms/epoch - 3ms/step\n","Epoch 277/1000\n","144/144 - 0s - loss: 0.3257 - accuracy: 0.8411 - val_loss: 0.4165 - val_accuracy: 0.8320 - 434ms/epoch - 3ms/step\n","Epoch 278/1000\n","144/144 - 0s - loss: 0.3232 - accuracy: 0.8457 - val_loss: 0.4231 - val_accuracy: 0.8184 - 448ms/epoch - 3ms/step\n","Epoch 279/1000\n","144/144 - 0s - loss: 0.3375 - accuracy: 0.8330 - val_loss: 0.4307 - val_accuracy: 0.8262 - 461ms/epoch - 3ms/step\n","Epoch 280/1000\n","144/144 - 0s - loss: 0.3267 - accuracy: 0.8461 - val_loss: 0.4356 - val_accuracy: 0.8125 - 419ms/epoch - 3ms/step\n","Epoch 281/1000\n","144/144 - 0s - loss: 0.3251 - accuracy: 0.8424 - val_loss: 0.4261 - val_accuracy: 0.8066 - 476ms/epoch - 3ms/step\n","Epoch 282/1000\n","144/144 - 0s - loss: 0.3242 - accuracy: 0.8415 - val_loss: 0.4089 - val_accuracy: 0.8203 - 422ms/epoch - 3ms/step\n","Epoch 283/1000\n","144/144 - 0s - loss: 0.3185 - accuracy: 0.8476 - val_loss: 0.4220 - val_accuracy: 0.8398 - 454ms/epoch - 3ms/step\n","Epoch 284/1000\n","144/144 - 0s - loss: 0.3304 - accuracy: 0.8437 - val_loss: 0.4110 - val_accuracy: 0.8242 - 455ms/epoch - 3ms/step\n","Epoch 285/1000\n","144/144 - 0s - loss: 0.3181 - accuracy: 0.8415 - val_loss: 0.4444 - val_accuracy: 0.8184 - 418ms/epoch - 3ms/step\n","Epoch 286/1000\n","144/144 - 0s - loss: 0.3315 - accuracy: 0.8367 - val_loss: 0.4295 - val_accuracy: 0.8125 - 459ms/epoch - 3ms/step\n","Epoch 287/1000\n","144/144 - 0s - loss: 0.3314 - accuracy: 0.8415 - val_loss: 0.4207 - val_accuracy: 0.8281 - 412ms/epoch - 3ms/step\n","Epoch 288/1000\n","144/144 - 0s - loss: 0.3188 - accuracy: 0.8493 - val_loss: 0.4248 - val_accuracy: 0.8262 - 427ms/epoch - 3ms/step\n","Test1 loss: 0.4687853753566742\n","Test1 accuracy: 0.7942517995834351\n"]}]}]}